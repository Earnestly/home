#!/bin/sh --
# web - start a prefered web browser
# requires qutebrowser svlogd md5sum

# --qt-flag no-sandbox

# --qt-flag disable-gpu
# --qt-flag disable-gpu-compositing
# --qt-flag disable-gpu-rasterization

# --qt-flag enable-native-gpu-memory-buffers
#
# --qt-flag enable-blink-features=feat,feat,...

# --qt-flag js-flags=--jitless

# XXX These are all mostly cargo-culted to try aid my poor x220 on a 2K monitor.
set -- --qt-flag enable-features=JXL,VaapiVideoEncoder,VaapiVideoDecoder,CanvasOopRasterization \
       --qt-flag enable-gpu-rasterization \
       --qt-flag ignore-gpu-blacklist \
       --qt-flag num-raster-threads="$(nproc)" \
       --qt-flag enable-accelerated-video-decode \
       --qt-flag use-gl=desktop \
       --qt-flag single-process \
       --no-err-windows --logfilter network -dD log-cookies "$@"

printf %s "$LOGNAME" | md5sum | {
    read -r md5 _

    if [ -S "$XDG_RUNTIME_DIR"/qutebrowser/ipc-"$md5" ]; then
        exec qutebrowser "$@"
    else
        mkdir -p -- "$HOME"/.local/var/log/web

        # XXX --dbus-stub appears ineffective in preventing chromium from its
        #       attempts to use dbus.  Instead an svlogd rule is used to prune
        #       it out.
        # export QTWEBENGINE_CHROMIUM_FLAGS=--dbus-stub
        if [ -s "$HOME"/.local/var/log/web/config ]; then
            printf '%s\n' '-*ERROR:bus.cc(*)] Failed to connect to the bus:*' > "$HOME"/.local/var/log/web/config
        fi

        exec qutebrowser "$@" 2>&1 | svlogd -ttt "$HOME"/.local/var/log/web
    fi
}
