#!/bin/bash
# ~/.local/bin/ditch
# Create a dmenu using the twitch team and stream api
# Requires jshon, dmenu-imlib-pango

# List of teams or streamers from twitch.tv for inclusion.  curl will pull down
# the json data simultaneously.  (Be careful with too many items (`t:` or `s:`))

# t: = twitch team name
# s: = twitch stream names seperated by commas (limit: 25, max: 100.  Add
#      `&limit=100` to raise this.)
twitch_list=(t:srl t:sda s:cgn0,s:fatzke,lukerf44,tirean,justshanz,misterpost,eidgod,ultimaomega07)

# Stream quality, each will be attempted in order and falls back to the next
stream_quality='medium,high,best,source'

# Options passed to dmenu, the `-p` prompt is passed later, remove `-w` if you
# use plain old dmenu
dmenu_opts=(-fn 'Dina Bold 8' -w -i -l 40)

# Make sure to not (-u) 'unstring' the title as it may contain valid escapes
# which break the strict ordering requirements for the while read loop.  We will
# manually de-string the titles later.
jshon_team_opts=(-e channels -a -e channel -e name -upe link -upe title)

# Arguments required for the steam API
jshon_stream_opts=(-e streams -a -e channel -e name -upe url -upe game)

get_json() {
    local s="$1"

    # team
    if [[ "$s" = t:* ]]; then
        curl -s http://api.twitch.tv/api/team/"${s#*:}"/live_channels.json
    # stream
    elif [[ "$s" = s:* ]]; then
        curl -s https://api.twitch.tv/kraken/streams?channel="${s#*:}"
    fi
}

# Generate an associative array where the key is the team and the value is the
# url to the twitch team api for that team.
declare -A json
for i in "${twitch_list[@]}"; do
    json["$i"]=$(get_json "$i" &)
done

# First line is always the streamer's name, followed by the url and then the
# streamer's title
declare -A streams
while {
    read -r name
    read -r url
    read -r title
}; do
    # Manually de-quote the title and remove backslashes
    title="${title%\"*}" title="${title#\"}" title="${title//\\/}"

    # Store the name and title for dmenu to display as the key in an associative
    # array where the url is the value.
    if [[ "$name" != http* ]]; then
        streams["$title ($name)"]="$url"
    fi
done < <(
    for i in "${!json[@]}"; do
        if [[ "$i" = t:* ]]; then
            jshon "${jshon_team_opts[@]}" <<< "${json[$i]}"
        elif [[ "$i" = s:* ]]; then
            jshon "${jshon_stream_opts[@]}" <<< "${json[$i]}"
        fi
    done
)

# Display the number of current streams in dmenu's prompt
dmenu_opts+=(-p "Streams (${#streams[@]})")

# Display the keys and store it as the selection
selection="$(printf '%s\n' "${!streams[@]}" | dmenu "${dmenu_opts[@]}")"

# Check if the selection actually matches a stream, this will also exit if
# nothing was selected
if [[ -z "${streams[$selection]}" ]]; then
    exit 1
fi

# Strip out any single quotes from the title, this is ugly though, very ugly.
lstreamer_opts=(
    -Q
    -p "mpv --really-quiet --title='${selection//\'/â€™}' --profile=live"
    --ringbuffer-size 800000
    "${streams[$selection]}"
    "$stream_quality"
)

# Pass the value based on the key from selectionection to livestreamer
if ! livestreamer "${lstreamer_opts[@]}"; then
    if hash i3-nagbar; then
        i3-nagbar -m "Failed to launch stream ${streams[$selection]}" -t error
    fi
    exit 1
fi
