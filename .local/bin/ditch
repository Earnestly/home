#!/bin/bash
# ~/.local/bin/ditch
# Create a dmenu using the twitch team api

declare -A streams
declare -A json

# List of teams from twitch.tv for inclusion.  curl will pull down the json data
# simultaneously.  (Be careful with too many elements)
teams=(srl sda mlg)

# Make sure to not (-u) 'unstring' the title as it may contain valid escapes
# which break the strict ordering requirements for the while read loop.  We will
# manually de-string the titles later.
jshon_opts=(-e channels -a -e channel -e name -u -p -e link -u -p -e title)

get_json() {
    local team="$1"
    curl -s "http://api.twitch.tv/api/team/$team/live_channels.json"
}

# Generate an associative array where the key is the team and the value is the
# url to the twitch team api for that team.
for i in "${teams[@]}"; do
    json["$i"]=$(get_json "$i" &)
done

# First line is always the streamer's name, followed by the url and then the
# streamer's title
while { 
    read -r name
    read -r url 
    read -r title
}; do 
    # Manually de-quote the title
    title="${title#\"*}" title="${title%\"*}"

    # Store the name and title for dmenu to display as the key in an associative
    # array where the url is the value.
    if [[ ! "$name" = http* ]]; then
        streams["$name ($title)"]="$url"
    fi
done < <(
    for i in "${json[@]}"; do
        jshon "${jshon_opts[@]}" <<< "$i"
    done
)

# Display the number of current streamers in dmenu's prompt
nstreams="${#streams[@]}"
dmenu_prompt="Streams ($nstreams)"

dmenu_opts=(-p "$dmenu_prompt" -fn "Dina Bold 8" -i -l 20)

# Display the keys and store it as the selection
if sel=$(printf "%s\n" "${!streams[@]}" | sort | dmenu "${dmenu_opts[@]}"); then
    lstreamer_opts=(
        # Strip out any single quotes, this is ugly though, very ugly.
        -Q -p "mpv --really-quiet --title='${sel//\'/}' --profile=live"
        --twitch-legacy-names --ringbuffer-size 800000
        # By default we will exclude anything higher than 720p, if no other
        # quality is available and best fails, fallback on source/mobile_source
        --stream-sorting-excludes '>720p,>720p+'
        "${streams[$sel]}"
        "best,source,mobile_source"
    )

    # Blindly pass the value based on the key from selection to livestreamer
    exec livestreamer "${lstreamer_opts[@]}"
fi
