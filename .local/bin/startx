#!/usr/bin/env bash
# startx
# Alternative, simpler startx which makes use of the XDG specification and
# eventually systemd.

# Make sure we aren't running in an xserver.
if [[ -n "$DISPLAY" ]]; then
    exit 1
fi

readonly confdir="${XDG_CONFIG_HOME:-$HOME/.config}"/X11
readonly cachedir="${XDG_CACHE_HOME:-$HOME/.cache}"/X11
readonly rundir="$XDG_RUNTIME_DIR"/X11

xinitrc="${XINITRC:-$confdir/xinitrc}"
#log="$cachedir"/X11/xsession.log

if ! mkdir -p "$confdir" "$rundir"; then
    exit 1
fi

export XAUTHORITY="$rundir"/xauthority

# E.g. ICE Authority stuff.
unset SESSION_MANAGER

if [[ -n "$XDG_VTNR" ]]; then
    export DISPLAY=:"$XDG_VTNR"
else
    printf >&2 'Apparently XDG_VTNR is not set, bailing out.\n'
    exit 1
fi

# I can blindly add a new entry with xauth because this is stored in a tmpfs.
xauth -q add "$DISPLAY" . "$(mcookie)" &> /dev/null

# # If using systemd --user with dbus.service.
# sysdopts=(
#     --user
#     --scope
#     --unit="xinit-$DISPLAY.scope"
#     --description="Simple xinit wrapper"
# )

serveropts=(
    vt"$XDG_VTNR" 
    -noreset
    -nolisten tcp 
    -auth "$XAUTHORITY"
)

exec xinit "${1:-$xinitrc}" -- "$DISPLAY" "${serveropts[@]}" "${@:2}"
#exec systemd-run "${sysdopts[@]}" xinit "${1:-$xinitrc}" -- "$DISPLAY" "${serveropts[@]}" "${@:2}"
