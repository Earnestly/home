#!/bin/bash
# abihck - Generates abi/api compliance report between two pacman packages
#          before and after a system update.

# Requires: abi-compliance-checker, api-sanity-checker, ctags, expac, pacman, makepkg

puts() {
    printf '%s\n' "$@"
}

err() {
    puts "$@" >&2
    exit 1
}

replicate_install() {
    local pname="$1"
    local version="$2"

    if ! bsdtar -xvf /var/cache/pacman/pkg/"$pname"-"$version"-"$arch".pkg.tar.xz -C abi/"$pname"/"$version"; then
        err 'Extraction failed.'
    fi
}

print_version() {
    local pname="$1"
    expac '%v' "$pname" || err "No version found for $pname."
}

make_relpath() {
    local path="$1"
    mkdir -p "$path"
}

check_package_exists() {
    local pname="$1"
    pacman -T "$pname" || err 'No such package found.'
}

dump_version() {
    local -a options
    local pname="$1"
    local version="$2"

    options=(
        -xml
        -lib "$pname"
        -log-path abi/logs/"$version"/dump_log.txt
        -relpath abi/"$pname"/"$version"/usr
        -dump abi/"$pname".xml -vnum "$version"
        -dump-path abi/"$pname"-"$version".abi
        #-extra-dump # What does this do?  All symbols?  Wonder what it means..
    )

    if ! abi-compliance-checker "${options[@]}"; then
        err 'Failed to dump first version.'
    fi
}

create_abi_dump() {
    local pname="$1"
    local version="$2"

    replicate_install "$pname" "$version"
    dump_version "$pname" "$version"
}

update_system() {
    set +e
    if ((makepkg)); then
        makepkg -rsc
        repose -fvr "$HOME"/build/repo earnestly
    fi
    sudo pacman -Syu
    set -e
}

compare_abi_dumps() {
    local -a options
    local pname="$1"
    local oversion="$2"
    local nversion="$3"

    options=(
        -lib "$pname"
        -old abi/"$pname"-"$oversion".abi
        -new abi/"$pname"-"$nversion".abi
        -relpath1 abi/"$pname"/"$oversion"/usr
        -relpath2 abi/"$pname"/"$nversion"/usr
        -log-path abi/logs
        -log1-path abi/logs/"$oversion"/log.txt
        -log2-path abi/logs/"$nversion"/log.txt
        -report-path abi/report_"$oversion"_to_"$nversion"/report.html
    )

    if ! abi-compliance-checker "${options[@]}"; then
        err 'Failed to compare abi.'
    fi
}

check_api_sanity() {
    local -a options
    local pname=$1
    local version=$2

    options=(
        -lib "$pname"
        -d "$pname".xml
        -relpath abi/"$pname"/"$version"/usr
        -vnum "$version"
        -gen
        -build
        -run
    )

    if ! api-sanity-checker "${options[@]}"; then
        err 'Failed to check api sanity.'
    fi
}

create_basic_descriptor() {
    local pname="$1"

    if [[ ! -f abi/"$pname".xml ]]; then
        cat <<EOF > abi/"$pname".xml
<headers>
    {RELPATH}/include/
</headers>

<libs>
    {RELPATH}/lib/
</libs>
EOF
    fi
}

if (($# == 0)); then
    err 'See -h'
fi

while (($#)); do
    case $1 in
        -m) makepkg=1 ;;
        -a) shift; arch="$1" ;;
        -h) puts 'Usage: abihck [-m] [-a arch] <package_name>'
            puts '       -m  Use makepkg and repose update before system update.'
            puts '       -a  Select architecture: i686, x86_64 or any.  Defaults to x86_64.'
            exit ;;
        *)  pname="$1"
    esac
    shift
done

if [[ ! "$arch" ]]; then
    arch=x86_64
fi

check_package_exists "$pname"

old_version="$(print_version "$pname")"
make_relpath abi/"$pname"/"$old_version"
create_basic_descriptor "$pname"
create_abi_dump "$pname" "$old_version"
update_system

new_version="$(print_version "$pname")"
if [[ $new_version == $old_version ]]; then
    err 'Versions are the same?'
fi

make_relpath abi/"$pname"/"$new_version"
create_abi_dump "$pname" "$new_version"
compare_abi_dumps "$pname" "$old_version" "$new_version"
check_api_sanity "$pname" "$new_version"
