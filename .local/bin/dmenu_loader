#!/bin/bash
# ~/bin/dmenu_loader

# dmenu_loader <file>

# A simple script which loads a key value pair into an associative array where
# the key is displayed by dmenu and the value is acted upon given the
# corresponding key

# Configuration example:
# Title=[optional: title for dmenu]
# # Comments
# Command=<required: program used to act on result from dmenu>
# Key Display=Value Executed

conf="$1"
title="${title:-Title}"
opts=(-fn "Dina Bold 8" -i -l 20 -w
      -nf '#a7a7a7' -nb '#1e1e1e'
      -sf '#9b859d' -sb '#262626')

declare -a cmd # Some commands might have arguments
declare -A index
index=()

# Read in the configuration file
if [[ -f "$conf" ]]; then
    while IFS='=' read key value; do
        case $key in
            '') 
                ;; # ignore blank lines
            '#'*) 
                ;;
            'Title') 
                title="$value"
                ;;
            'Command') 
                cmd=($value)
                ;;
            *) 
                index["$key"]="$value" 
                ;;
        esac
    done < "$conf"
else
    printf >&2 'No configuration specified.\n'
    exit 1
fi

# Print the keys for dmenu consumption
selection=$(
    printf '%s\n' "${!index[@]}" | sort | dmenu -p "$title" "${opts[@]}"
)

# Make sure we get a selection before continuing
if [[ -z "$selection" ]]; then
    printf >&2 'Nothing selected.\n'
    exit 0
fi

# Check that the command exists, we skip any prefixes such as `exec` to
# avoid checking the wrong command and generating false positives
for c in "${cmd[@]}"; do
    if [[ "$c" == exec ]]; then
        continue
    fi

    if hash "$c"; then
        exec "$c" "${index[$selection]}"
    else
        printf >&2 'No Command specified.\n'
        exit 1
    fi
done
