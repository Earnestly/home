#!/bin/bash
# ~/.local/bin/plaid <url or path to playlist>
# Generate a playlist for mpv's consumption while creating and/or appending to
# a dmenu_loader file.
# Requires jshon, elinks, dmenu_loader, quvi, mpv

# XXX Need to remove duplication and think about a better structure, or use
#     something else, sql?  Eugh

# Environment
XDG_DATA_HOME="${XDG_DATA_HOME:-$HOME/.local/share}"

# Globals
dmenu_plaid="$XDG_DATA_HOME"/dmenu/plaid/dmenu_plaid
playlist_dir="$XDG_DATA_HOME"/dmenu/plaid/playlists

# Both of these are global and set by functions
# playlist_file
# title

# Make sure directories exist before doing anything
if [[ ! -d "$playlist_dir" ]]; then
    mkdir -p "$playlist_dir"
fi

# Generate skeleton structure for `dmenu_loader`
if [[ ! -e "$dmenu_plaid" ]]; then
cat <<EOF > "$dmenu_plaid"
Title=Playlist
Command=exec plaid

EOF
fi

# If the playlist already exists and is a file, use that
handle_local() {
    local url="$1"
    local k v c

    # Just scan the file for any matches and use them
    while IFS='=' read -r k v; do
        if [[ "$v" == "$url" ]]; then
            title="$k"
            playlist_file="$v"
        fi
    done < "$dmenu_plaid"

    playlist_file="$playlist_dir"/"$title"
}

handle_youtube() {
    local url="$1"
    local json playlist

    json=$(quvi dump -p json "$url")

    title=$(jshon -e quvi -e playlist -e QUVI_PLAYLIST_PROPERTY_TITLE <<< "$json")

    # Strip %20s and quotes, ಠ_ಠ
    title="${title//\"/}"; title="${title//\'/}"; title="${title//\%20/ }"

    playlist=$(jshon -e quvi -e playlist -e media -a -e QUVI_PLAYLIST_MEDIA_PROPERTY_URL -u <<< "$json")

    playlist_file="$playlist_dir"/"$title"

    # Unconditionally remove the playlist and recreate it, this is also going to
    # create a lot of code duplication, sigh
    if [[ -e "$playlist_file" ]]; then
        rm -- "$playlist_file"
        printf "%s\n" "$playlist" >> "$playlist_file"
    else
        printf "%s\n" "$playlist" >> "$playlist_file"
    fi
}

# Speed Demos Archives
handle_sda() {
    local url="$1"
    local urls data playlist line

    data=$(elinks -dump -no-numbering "$url")

    # Use the name of the demo as the title, e.g.
    # http://.../demo?The_Demo_Name → The_Demo_Name
    title="${url#*\?}"

    # Uses archive.org instead of dl.speeddemoarchives.org
    playlist=$(
        while read -r line; do
            printf "%s\n" "$line"
        done < <(awk '$2 !~ /http.*(HQ|LQ|IQ)/ && /http.*download/ { print $2 }' <<< "$data")
    )
    
    playlist_file="$playlist_dir"/"$title"

    if [[ -e "$playlist_file" ]]; then
        rm -- "$playlist_file"
        printf "%s\n" "$playlist" >> "$playlist_file"
    else
        printf "%s\n" "$playlist" >> "$playlist_file"
    fi
}

case "$1" in
    "$playlist_dir"/*) 
        if [[ -e "$1" ]]; then
            handle_local "$1"
        else
            printf >&2 '%s: Does not exist.\n' "$1"
            exit 1
        fi
    ;;
    *youtube.com*) 
        handle_youtube "$1"
    ;;
    *speeddemosarchive.com*) 
        handle_sda "$1"
    ;;
    *) 
        printf >&2 '%s: Unknown URI\n' "$1"
        exit 1
    ;;
esac

# Use a counter to increment any occurances of a match, if we've gone through
# the entire file without a match, append a new entry
while IFS='=' read -r k v; do
   if [[ "$k" == "$title" && "$v" == "$playlist_file" ]]; then
       ((occurs++))
   fi
done < "$dmenu_plaid"

# If no occurances
if ! ((occurs)); then
    printf "%s=%s\n" "$title" "$playlist_file" >> "$dmenu_plaid"
fi

mpv_opts=(
    --save-position-on-quit 
    --really-quiet
    --playlist="$playlist_file"
    --title="$title"
)

mpv "${mpv_opts[@]}" 
