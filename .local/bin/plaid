#!/bin/bash
# ~/.local/bin/plaid <url or path to playlist>
# Generate a playlist for mpv's consumption while creating and/or appending to
# a dmenu_loader file.
# Requires jshon, elinks, dmenu_loader, quvi, mpv

# XXX Need to remove duplication and think about a better structure, or use
#     something else, sql?  Eugh

# Make sure we get at least one argument before doing anything
if (($# > 1)); then
    printf >&2 'Usage: plaid <uri>\n'
    exit 1
fi

# Environment
XDG_DATA_HOME="${XDG_DATA_HOME:-$HOME/.local/share}"

# Include handlers
if ! source "$XDG_DATA_HOME"/plaid/handlers; then
    printf >&2 'Error sourcing: %s\n' "$XDG_DATA_HOME/plaid/handlers"
    exit 1
fi

# Globals
dmenu_file="$XDG_DATA_HOME"/plaid/plaid_dmenu
playlist_dir="$XDG_DATA_HOME"/plaid/playlists

# Make sure directories exist before doing anything
if [[ ! -d "$playlist_dir" ]]; then
    mkdir -p "$playlist_dir"
fi

# Generate skeleton structure for `dmenu_loader`
if [[ ! -e "$dmenu_file" ]]; then
cat <<EOF > "$dmenu_file"
Title=Playlist
Command=exec plaid

EOF
fi


case "$1" in
    "$playlist_dir"/*)
        if [[ -e "$1" ]]; then
            handle_local "$1"
        else
            printf >&2 '%s: Does not exist.\n' "$1"
            exit 1
        fi
    ;;
    *youtube.com*)
        handle_youtube "$1"
    ;;
    *speeddemosarchive.com*)
        handle_sda "$1"
    ;;
    *)
        printf >&2 '%s: Unknown URI\n' "$1"
        exit 1
    ;;
esac

# Use a counter to increment any occurances of a match, if we've gone through
# the entire file without a match, append a new entry
while IFS='=' read -r k v; do
   if [[ "$k" == "$title" && "$v" == "$playlist_file" ]]; then
       ((occurs++))
   fi
done < "$dmenu_file"

# If no occurances
if ! ((occurs)); then
    printf '%s=%s\n' "$title" "$playlist_file" >> "$dmenu_file"
fi

if [[ -n "$title" && -n "$playlist_file" ]]; then
    mpv_opts=(
        --save-position-on-quit
        --really-quiet
        --playlist="$playlist_file"
        --title="$title"
    )

    exec mpv "${mpv_opts[@]}"
fi
