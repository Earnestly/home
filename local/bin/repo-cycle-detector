#!/bin/bash
# repo-cycle-detector - attempt to detect cycles in pacman repos

set +e
repo=$1

usage() {
    if ((!$#)); then
        printf 'usage: repo-cycle-detector repo\n' >&2
        exit 1
    fi
}

constrain_to() {
    repo=$1
    awk -v repo="^$repo" '$1 ~ repo { print $2 }'
}

generate() {
    local repo=$1
    # The format is formally package:dependency0:dependency1:..:dependency(n),
    # however as expac cannot be constrained to search a specific repo I will
    # instead use a sentinel value as a means to contrain the results to that
    # value.  The sentinel in this case will be based on the value of $repo.

    # https://github.com/falconindy/expac/issues/24
    expac -S '%r %n:%E' -l ':' < <(pacman -Sql "$repo") | constrain_to "$repo"
}

parse() {
    # We assume a package name cannot contain this FS.
    awk -F : '{ 
        p = $1

        # If we find that a package contains no dependency, make it a
        # dependency of itself to provide tsort a complete graph.
        if($2 == "")
            $2 = $1

        for(i = 1; i <= NF; ++i)
            printf "%s %s\n", p, $NF
    }'
}

usage "$@"
generate "$repo" | parse | tsort > /dev/null
