#!/bin/sh --
# pusage - simple attempt to breakdown the total usage of a process

# I don't do any error checking.  Assumes /proc/config.gz is zipped.
set -o errexit
set -o nounset

read -r comm < /proc/"$1"/comm
elapsed=$(ps -p "$1" -o etimes=)
hz=$(gzip -cd /proc/config.gz | sed -nr 's/^CONFIG_HZ=(.*)/\1/p')

printf 'report for %s (%d) @ %dHz\n' "$comm" "$1" "$hz"

awk -v hz="$hz" -v elapsed="$elapsed" '
END {
    utime = $14 / hz
    stime = $15 / hz
    cutime = $16 / hz
    sutime = $17 / hz
    runtime = elapsed

    days = runtime / 86400
    runtime = runtime % 86400
    hours = runtime / 3600
    minutes = (runtime % 3600) / 60
    seconds = runtime % 60

    if(days > 0)
        uptime = sprintf("%02d days %02d:%02d:%02d", days, hours, minutes, seconds)
    else
        uptime = sprintf("%02d:%02d:%02d", hours, minutes, seconds)

    total_cpu_time = utime + stime + cutime + cstime

    perc_used = (total_cpu_time / elapsed) * 100
    userspace_perc = ((utime + cutime) / elapsed) * 100
    kernelspace_perc = ((stime + cstime) / elapsed) * 100

    printf "process uptime            %s\n", uptime
    printf "overall cpu usage         %s %.3f%%\n", strftime("%T", total_cpu_time, 1), perc_used
    printf "time spent in userspace   %s %.3f%%\n", strftime("%T", utime + cutime, 1), userspace_perc
    printf "time spent in kernelspace %s %.3f%%\n", strftime("%T", stime + cstime, 1), kernelspace_perc
}' /proc/"$1"/stat
