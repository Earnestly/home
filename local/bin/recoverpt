#!/bin/bash
# recoverpt - attempts to recover the partition table from the running kernel

# requires awk udevadm lsblk systemd-escape

headers() {
    awk -F= -v size="$1" '
        /TABLE_TYPE/ { label = $2 }
        /TABLE_UUID/ { label_id = $2 }
        /DEVNAME/    { device = $2 }

        END {
            print "label:", label

            # Some MBR disks dont have a label-id
            if(label_id && label == "dos")
                    print "label-id: 0x" label_id

            if(label == "gpt")
                    print "label-id:", toupper(label_id)

            print "device:", device
            print "unit: sectors"

            if(label == "gpt"){
                print "first-lba: 34"
                print "last-lba:", size - 34
            }

            print ""
        }'
}

partitions() {
    awk -F= '
    function unescape(s) {
        # XXX Cannot use systemd-escape(1) here as it will convert - to / which
        #     is incorrect for "x86-64".  Instead only spaces (\x20) will be
        #     supported until others are needed.  All current GPT partition
        #     type names seem to be ASCII anyway.
        gsub(/\\\\x20/, " ", s)
        return s
    }

    # Bail if we are dealing with device mapper devices.
    /^DM_/                  { exit }

    /^DEVNAME/              { device = $2 }
    /^ID_PART_TABLE_TYPE/   { label = $2 }
    /^ID_PART_ENTRY_NAME/   { name = $2 }
    /^ID_PART_ENTRY_OFFSET/ { start = $2 }
    /^ID_PART_ENTRY_SIZE/   { size = $2 }
    /^ID_PART_ENTRY_TYPE/   { type = $2 }
    /^ID_PART_ENTRY_UUID/   { uuid = $2 }

    # FIXME: Are these attrs available to the kernel at all?
    # /      ?      /       { attrs = $2 }

    END {
        # sfdisk doesnt want the leading 0x notation for MBR disks
        if(label == "dos")
            type = substr(type, 3) # Yes, 3 for "0x"

        printf "%-10s: start=%12d, size=%12d, type=%s", device, start, size, toupper(type)

        if(uuid)
            printf ", uuid=%s", toupper(uuid)

        # if(attrs)
        #     printf ", attrs=\"%s\"", attrs

        if(name)
            printf ", name=\"%s\"", unescape(name)

        print ""
    }'
}

if [[ $1 == '-h' ]]; then
    cat > /dev/stderr <<!
usage: recoverpt device

WARNING:
    Ensure the output of this tool is reasonably accurate as it is only a
    best-effort guess based on what udevadm knows.

Notes:
    This tool won't be able to recover the bootable flag or GPT attributes.
    If these are needed simply append them to the desired device fields.

    For example:

        /dev/sda1 : ..., name="...", attrs="LegacyBIOSBootable", bootable

Example Usage:

    Assuming we want to recover the sda device, the tool can be used in the
    following way:

        % recoverpt /dev/sda > sda.dump

    After having reviewed the content of the sda.dump, one can pass it directly
    to sfdisk's stdin to apply it.  Please make sure you have read sfdisk(8).

        # sfdisk /dev/sda < sda.dump

!
    exit
fi

if [[ ! -b $1 ]]; then
    printf 'usage: recoverpt device\n' >&2
    exit 1
fi

lsblk -no kname "$1" | {
    read -r dev

    # For some reason this value is not available from udevadm info.
    read -r size < /sys/class/block/"$dev"/size

    udevadm info --query=property --name /dev/"$dev" | headers "$size"

    while read -r dev; do
        udevadm info --query=property --name /dev/"$dev" | partitions
    done
}
