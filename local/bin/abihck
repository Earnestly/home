#!/bin/bash --
# abihck - generate abi/api compliance report between two pacman packages before and after a system update

# requires abi-compliance-checker api-sanity-checker ctags expac pacman makepkg

readonly argv0=abihck

puts() {
    printf '%s\n' "$@"
}

err() {
    puts "$argv0: $1" "${@:2}" >&2
    exit 1
}

replicate_install() {
    local pname=$1
    local version=$2
    local package=/var/cache/pacman/pkg/"$pname"-"$version"-"$arch".pkg.tar.xz

    if ! bsdtar -xvf "$package" -C abi/"$pname"/"$version"; then
        err 'extraction failed'
    fi
}

print_version() {
    local pname=$1
    expac '%v' "$pname" || err '%s: no version found' "$pname"
}

check_package_exists() {
    local pname=$1
    pacman -T "$pname" || err 'no such package found'
}

dump_version() {
    local -a options
    local pname=$1
    local version=$2

    options=(
        -xml
        -lib "$pname"
        -log-path abi/logs/"$version"/dump_log.txt
        -relpath abi/"$pname"/"$version"/usr
        -dump abi/"$pname".xml -vnum "$version"
        -dump-path abi/"$pname"-"$version".abi
        #-extra-dump # What does this do?  All symbols?  Wonder what it means..
    )

    if ! abi-compliance-checker "${options[@]}"; then
        err 'failed to dump first version'
    fi
}

create_abi_dump() {
    local pname=$1
    local version=$2

    replicate_install "$pname" "$version"
    dump_version "$pname" "$version"
}

update_system() {
    set +e
    if ((makepkg)); then
        makepkg -rscf
        repose -fvr "$HOME"/build/repo earnestly
    fi
    sudo pacman -Syu
    set -e
}

compare_abi_dumps() {
    local -a options
    local pname=$1
    local oversion=$2
    local nversion=$3

    options=(
        -lib "$pname"
        -old abi/"$pname"-"$oversion".abi
        -new abi/"$pname"-"$nversion".abi
        -relpath1 abi/"$pname"/"$oversion"/usr
        -relpath2 abi/"$pname"/"$nversion"/usr
        -log-path abi/logs
        -log1-path abi/logs/"$oversion"/log.txt
        -log2-path abi/logs/"$nversion"/log.txt
        -report-path abi/report_"$oversion"_to_"$nversion"/report.html
    )

    if ! abi-compliance-checker "${options[@]}"; then
        err 'failed to compare abi'
    fi
}

check_api_sanity() {
    local -a options
    local pname=$1
    local version=$2

    options=(
        -lib "$pname"
        -d "$pname".xml
        -relpath "$pname"/"$version"/usr
        -vnum "$version"
        -gen
        -build
        -run
    )

    if [[ -e abi/spec_types.xml ]]; then
        options+=(-st spec_types.xml)
    fi

    if ! (cd abi && api-sanity-checker "${options[@]}"); then
        err 'failed to check api sanity'
    fi
}

create_basic_descriptor() {
    local pname=$1

    if [[ ! -f abi/"$pname".xml ]]; then
        cat <<EOF > abi/"$pname".xml
<headers>
    {RELPATH}/include/
</headers>

<libs>
    {RELPATH}/lib/
</libs>
EOF
    fi
}

if ((!$#)); then
    err 'See -h'
fi

while (($#)); do
    case $1 in
        -m) makepkg=1 ;;
        -a) shift; arch=$1 ;;
        -h) puts 'usage: abihck [-m] [-a arch] pkgname'
            puts '       -m  Use makepkg and repose update before system update'
            puts '       -a  Select architecture: i686, x86_64 or any (defaults to x86_64)'
            exit ;;
        *)  pname=$1
    esac
    shift
done

if [[ ! $arch ]]; then
    arch=x86_64
fi

check_package_exists "$pname"

old_version=$(print_version "$pname")
mkdir -p abi/"$pname"/"$old_version"
create_basic_descriptor "$pname"
create_abi_dump "$pname" "$old_version"
update_system

new_version=$(print_version "$pname")
if [[ $new_version == "$old_version" ]]; then
    err 'same versions'
fi

mkdir -p abi/"$pname"/"$new_version"
create_abi_dump "$pname" "$new_version"
compare_abi_dumps "$pname" "$old_version" "$new_version"
check_api_sanity "$pname" "$new_version"
