#!/bin/sh --
# mkwineprefix - creates a wine prefix or updates it

# requires wine

# Unlinks all directories pointing at the users home, optionally remaps z: to
# /mnt instead of / and disables winemenubuilder to prevent .desktop/mime
# generation.

# TODO
# * complete a mechanism to load external registery snippets

# POSIX with local
# shellcheck disable=SC2039

readonly argv0=mkwineprefix

usage() {
    cat <<!
usage: $argv0 [-mgh] [-r dir] [-a winearch] prefix

options
    -a winearch  win32 or win64 (default: win32)
    -m           enable mono installation
    -g           enable gecko installation
    -r dir       symlinks WINEPREFIX/dosdevices/z: to dir instead of /
    -h           this help message

prefix
    The path to the prefix, the current working directory is
    prepended if not absolute
!
}

error() {
    local r=$1 fmt=$2
    shift 2
    printf -- "%s: $fmt" "$argv0" "$@" >&2
    exit "$r"
}

warn() {
    local fmt=$1
    shift
    printf -- "%s: $fmt" "$argv0" "$@" >&2
}

while getopts :a:r:gmh arg; do
    case $arg in
        a) arch=$OPTARG ;;
        g) with_gecko=1 ;;
        m) with_mono=1 ;;
        r) remap_z=$OPTARG ;;
        h) usage; exit ;;
        *) printf 'usage: %s [-mgh] [-r dir] [-a winearch] prefix\n' "$argv0" >&2; exit 1
    esac
done
shift $((OPTIND - 1))

if [ ! "$1" ]; then
    error 22 'no prefix provided\n'
fi

prefix=$1

case $arch in
    '') arch=win32 ;;
    win32) export WINEARCH=win32 ;;
    win64) export WINEARCH=win64 ;;
    *) error 22 '%s: invalid architecture (win32 or win64)\n' "$arch"
esac

if ! prefix=$(readlink -e "$1"); then
   error 20 '%s: unable to determine canonical path for the prefix\n' "$1"
fi

export WINEPREFIX="$prefix"

# XXX This is a bit of a proxy condition but I'm not sure how else to detect
#     if a given path represents a wine prefix.
if [ -d "$WINEPREFIX"/dosdevices ]; then
    warn '%s: prefix already exists, updating\n' "$WINEPREFIX"
    operation=-u
fi

case $with_mono-$with_gecko in
    1-1) export WINEDLLOVERRIDES='winemenubuilder.exe=d' ;;
    1-*) export WINEDLLOVERRIDES='winemenubuilder.exe,mshtml=d' ;;
    *-1) export WINEDLLOVERRIDES='winemenubuilder.exe,mscoree=d' ;;
    *-*) export WINEDLLOVERRIDES='winemenubuilder.exe,mscoree,mshtml=d'
esac

# Initialise the prefix now so we can fix it before any work is done with it.
if ! wine wineboot "${operation:--i}"; then
    exit
fi

# Remapping z: allows us to potentially limit what wine can see.

# We don't check if the remap is a valid directory because creating
# deliberately broken symlinks is a useful usecase.
if [ "$remap_z" ]; then
    rm -f -- "$WINEPREFIX"/dosdevices/z:

    if ! ln -sf -- "$remap_z" "$WINEPREFIX"/dosdevices/z:; then
        exit
    fi
fi

# Remove all the symlinks (which point outside the prefix).
for dir in "$WINEPREFIX"/drive_c/users/"$USER"/*; do
    if [ -d "$dir" ] && [ -h "$dir" ]; then
        rm -f -- "$dir"
        mkdir -p -- "$WINEPREFIX"/drive_c/users/"$USER"/"$dir"
    fi
done

# Return the created prefix.
printf -- '%s\n' "$WINEPREFIX"

# cat > "$WINEPREFIX"/colors.reg <<!
# REGEDIT4
# [HKEY_CURRENT_USER\Control Panel\Colors]
# "Background"="33 33 33"
# !

# cat > "$WINEPREFIX"/virtual_desktop.reg <<!
# REGEDIT4
# [HKEY_CURRENT_USER\Software\Wine\Explorer]
# "Desktop"="Default"
# [HKEY_CURRENT_USER\Software\Wine\Explorer\Desktops]
# "Default"="1024x786"
# !

# wine regedit /S "$WINEPREFIX"/colors.reg
# wine regedit /S "$WINEPREFIX"/virtual_desktop.reg
