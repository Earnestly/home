#!/bin/bash
# mkwineprefix - creates a sane wine prefix

# Unlinks all directories pointing at the users home, optionally remaps z: to
# /mnt instead of / and disables winemenubuilder to prevent .desktop/mime
# pollution

# TODO complete a mechanism to load external registery snippets

readonly argv0=mkwineprefix

usage() {
    cat >&2 <<!
usage: mkwineprefix [-a arch] [-m] [-g] [-r] [-h] prefix

options
    -a arch  Architecture, 32 or 64 (Default: 32)
    -m       Enable Mono installation
    -g       Enable Gecko installation
    -r       Remap z: to /mnt instead of /
    -h       This help message

prefix
    The path to the prefix, pwd prepended if not absolute.
!
}

errx() {
    declare -i r=$1
    printf -- "%s: $2" "$argv0" "${@:3}" >&2
    exit "$r"
}

# We need at least one argument.
if (($# == 0)); then
    errx 1 'usage: mkwineprefix [-a arch] [-m] [-g] [-r] [-h] prefix\n'
fi

while (($#)); do
    case $1 in
        -a) shift; arch=$1 ;;
        -g) with_gecko=1 ;;
        -m) with_mono=1 ;;
        -r) remap_z=1 ;;
        -h) usage
            exit
            ;;
        *)  prefix=$1
            ;;
    esac
    shift
done

case $arch in
    '') arch=32 ;;
    32) export WINEARCH=win32 ;;
    64) export WINEARCH=win64 ;;
    *)  errx 1 '%s: invalid architecture (32 or 64)\n' "$arch" ;;
esac

case $prefix in
    '')    errx 1 'no prefix\n' ;;
    /*)    export WINEPREFIX="$prefix" ;;
    [!/]*) export WINEPREFIX="$PWD/$prefix" ;;
esac

# Check if the prefix already exists using dosdevices as a sentinel
# XXX Is this really necessary?
if [[ -d $WINEPREFIX/dosdevices ]]; then
    errx 1 '%s: prefix already exists\n' "$WINEPREFIX"
fi

# Enable both if set by unsetting overrides.
if ((with_mono & with_gecko)); then
    export WINEDLLOVERRIDES='winemenubuilder.exe=d'
elif ((with_mono)); then
    export WINEDLLOVERRIDES='winemenubuilder.exe,mshtml=d'
elif ((with_gecko)); then
    export WINEDLLOVERRIDES='winemenubuilder.exe,mscoree=d'
else
    export WINEDLLOVERRIDES='winemenubuilder.exe,mscoree,mshtml=d'
fi

# Initialise the prefix now so we can fix it before any work is done with it.
wine wineboot -i || exit

# Remap Z: which limits what wine can see, the default / gives access to
# everything the user does.  Selecting /mnt as an alternative due to most isos
# being mounted there for installation purposes.
if ((remap_z)); then
    if [[ -d $WINEPREFIX/dosdevices/z: ]]; then
        rm -- "$WINEPREFIX"/dosdevices/z:

        # Recreate it and point to /mnt instead of /.
        ln -sf /mnt "$WINEPREFIX"/dosdevices/z:
    fi
fi

# Remove all the symlinks pointing at the user home directory.
# Note: Since a prefix is always going to be created as Windows XP we don't
#       need to test for windows 7+ directories.  This would only matter if
#       we were going to modify extant prefixes.
for dir in Desktop 'My Documents' 'My Music' 'My Pictures' 'My Videos'; do
    rm "$WINEPREFIX"/drive_c/users/"$USER"/"$dir"
    mkdir -p "$WINEPREFIX"/drive_c/users/"$USER"/"$dir"
done

# Return a useful string users may copy for this prefix.
printf 'export WINEPREFIX=%s\n' "$WINEPREFIX"

# cat > "$WINEPREFIX"/colors.reg <<!
# REGEDIT4
# [HKEY_CURRENT_USER\Control Panel\Colors]
# "Background"="33 33 33"
# !

# cat > "$WINEPREFIX"/virtual_desktop.reg <<!
# REGEDIT4
# [HKEY_CURRENT_USER\Software\Wine\Explorer]
# "Desktop"="Default"
# [HKEY_CURRENT_USER\Software\Wine\Explorer\Desktops]
# "Default"="1024x786"
# !

# wine regedit /S "$WINEPREFIX"/colors.reg
# wine regedit /S "$WINEPREFIX"/virtual_desktop.reg
