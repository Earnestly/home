#!/bin/bash
# bemenu-loader - general menu generation from configuration

# configuration example
#   Title=[optional: title for bemenu]
#   # Comments
#   Command=<required: program used to act on result from bemenu>
#   key display=value executed

readonly argv0=bemenu-loader
readonly input="$1"

# Number of entries to display at once.
readonly lines=20
read -r font < "${XDG_CONFIG_HOME:-$HOME/.config}"/dmenu/font

# Options passed to bemenu.
bemenu_opts=(
    --fn "$font" -w -i -l "$lines"
    --tf '#eff1f5' --tb '#bf616a'
    --ff '#c0c5ce' --fb '#2b303b'
    --sf '#bf616a' --sb '#343d46'
    --nf '#65737e' --nb '#343d46'
    --hf '#c0c5ce' --hb '#343d46'
    --scf '#65737e' --scb '#343d46'
    --scrollbar autohide
)

declare -a cmd # Some commands might have arguments.
declare -A index

title=${title:-Title}

# Read in the configuration file.
if [[ -f $input ]]; then
    while IFS='=' read -r k v; do
        case $k in
            '') # Ignore blank lines.
                ;;
            \#*)
                ;;
            Title)
                title=$v
                ;;
            Command)
                cmd=($v)
                ;;
            *)
                index["$k"]="$v"
                ;;
        esac
    done < "$input"
else
    printf 'No configuration specified\n' >&2
    exit 1
fi

# Append the number of elements to the title.
bemenu_opts+=(-p "$title")

# Print the keys for bemenu consumption.
selection=$(printf '%s\n' "${!index[@]}" | sort | bemenu "${bemenu_opts[@]}")

# Make sure we get a selection before continuing.
[[ ! $selection ]] && exit 0

# Check that the command exists, we skip any prefixes such as `exec` to
# avoid checking the wrong command and generating false positives.  This is
# pretty fragile though.
for c in "${cmd[@]}"; do
    # XXX Hacks!
    if [[ "$c" =~ exec|nohup ]]; then
        continue
    fi

    if hash "$c" &> /dev/null; then
        exec "$c" "${index[$selection]}"
    else
        printf 'No Command specified\n' >&2
        exit 1
    fi
done
